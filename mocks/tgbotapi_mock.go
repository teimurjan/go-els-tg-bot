// Code generated by MockGen. DO NOT EDIT.
// Source: ../mocks/tgbot_interface.go

// Package mock_tgbotapi is a generated GoMock package.
package mocks

import (
	io "io"
	url "net/url"
	reflect "reflect"

	telegram_bot_api "github.com/go-telegram-bot-api/telegram-bot-api"
	gomock "github.com/golang/mock/gomock"
)

// MockBotAPI is a mock of BotAPI interface
type MockBotAPI struct {
	ctrl     *gomock.Controller
	recorder *MockBotAPIMockRecorder
}

// MockBotAPIMockRecorder is the mock recorder for MockBotAPI
type MockBotAPIMockRecorder struct {
	mock *MockBotAPI
}

// NewMockBotAPI creates a new mock instance
func NewMockBotAPI(ctrl *gomock.Controller) *MockBotAPI {
	mock := &MockBotAPI{ctrl: ctrl}
	mock.recorder = &MockBotAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBotAPI) EXPECT() *MockBotAPIMockRecorder {
	return m.recorder
}

// MakeRequest mocks base method
func (m *MockBotAPI) MakeRequest(endpoint string, params url.Values) (telegram_bot_api.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeRequest", endpoint, params)
	ret0, _ := ret[0].(telegram_bot_api.APIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeRequest indicates an expected call of MakeRequest
func (mr *MockBotAPIMockRecorder) MakeRequest(endpoint, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeRequest", reflect.TypeOf((*MockBotAPI)(nil).MakeRequest), endpoint, params)
}

// decodeAPIResponse mocks base method
func (m *MockBotAPI) decodeAPIResponse(responseBody io.Reader, resp *telegram_bot_api.APIResponse) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "decodeAPIResponse", responseBody, resp)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// decodeAPIResponse indicates an expected call of decodeAPIResponse
func (mr *MockBotAPIMockRecorder) decodeAPIResponse(responseBody, resp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "decodeAPIResponse", reflect.TypeOf((*MockBotAPI)(nil).decodeAPIResponse), responseBody, resp)
}

// makeMessageRequest mocks base method
func (m *MockBotAPI) makeMessageRequest(endpoint string, params url.Values) (telegram_bot_api.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "makeMessageRequest", endpoint, params)
	ret0, _ := ret[0].(telegram_bot_api.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// makeMessageRequest indicates an expected call of makeMessageRequest
func (mr *MockBotAPIMockRecorder) makeMessageRequest(endpoint, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "makeMessageRequest", reflect.TypeOf((*MockBotAPI)(nil).makeMessageRequest), endpoint, params)
}

// UploadFile mocks base method
func (m *MockBotAPI) UploadFile(endpoint string, params map[string]string, fieldname string, file interface{}) (telegram_bot_api.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFile", endpoint, params, fieldname, file)
	ret0, _ := ret[0].(telegram_bot_api.APIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadFile indicates an expected call of UploadFile
func (mr *MockBotAPIMockRecorder) UploadFile(endpoint, params, fieldname, file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockBotAPI)(nil).UploadFile), endpoint, params, fieldname, file)
}

// GetFileDirectURL mocks base method
func (m *MockBotAPI) GetFileDirectURL(fileID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileDirectURL", fileID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileDirectURL indicates an expected call of GetFileDirectURL
func (mr *MockBotAPIMockRecorder) GetFileDirectURL(fileID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileDirectURL", reflect.TypeOf((*MockBotAPI)(nil).GetFileDirectURL), fileID)
}

// GetMe mocks base method
func (m *MockBotAPI) GetMe() (telegram_bot_api.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMe")
	ret0, _ := ret[0].(telegram_bot_api.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMe indicates an expected call of GetMe
func (mr *MockBotAPIMockRecorder) GetMe() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMe", reflect.TypeOf((*MockBotAPI)(nil).GetMe))
}

// IsMessageToMe mocks base method
func (m *MockBotAPI) IsMessageToMe(message telegram_bot_api.Message) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMessageToMe", message)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsMessageToMe indicates an expected call of IsMessageToMe
func (mr *MockBotAPIMockRecorder) IsMessageToMe(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMessageToMe", reflect.TypeOf((*MockBotAPI)(nil).IsMessageToMe), message)
}

// Send mocks base method
func (m *MockBotAPI) Send(c telegram_bot_api.Chattable) (telegram_bot_api.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", c)
	ret0, _ := ret[0].(telegram_bot_api.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send
func (mr *MockBotAPIMockRecorder) Send(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockBotAPI)(nil).Send), c)
}

// debugLog mocks base method
func (m *MockBotAPI) debugLog(context string, v url.Values, message interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "debugLog", context, v, message)
}

// debugLog indicates an expected call of debugLog
func (mr *MockBotAPIMockRecorder) debugLog(context, v, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "debugLog", reflect.TypeOf((*MockBotAPI)(nil).debugLog), context, v, message)
}

// sendExisting mocks base method
func (m *MockBotAPI) sendExisting(method string, config telegram_bot_api.Fileable) (telegram_bot_api.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "sendExisting", method, config)
	ret0, _ := ret[0].(telegram_bot_api.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// sendExisting indicates an expected call of sendExisting
func (mr *MockBotAPIMockRecorder) sendExisting(method, config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "sendExisting", reflect.TypeOf((*MockBotAPI)(nil).sendExisting), method, config)
}

// uploadAndSend mocks base method
func (m *MockBotAPI) uploadAndSend(method string, config telegram_bot_api.Fileable) (telegram_bot_api.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "uploadAndSend", method, config)
	ret0, _ := ret[0].(telegram_bot_api.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// uploadAndSend indicates an expected call of uploadAndSend
func (mr *MockBotAPIMockRecorder) uploadAndSend(method, config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "uploadAndSend", reflect.TypeOf((*MockBotAPI)(nil).uploadAndSend), method, config)
}

// sendFile mocks base method
func (m *MockBotAPI) sendFile(config telegram_bot_api.Fileable) (telegram_bot_api.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "sendFile", config)
	ret0, _ := ret[0].(telegram_bot_api.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// sendFile indicates an expected call of sendFile
func (mr *MockBotAPIMockRecorder) sendFile(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "sendFile", reflect.TypeOf((*MockBotAPI)(nil).sendFile), config)
}

// sendChattable mocks base method
func (m *MockBotAPI) sendChattable(config telegram_bot_api.Chattable) (telegram_bot_api.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "sendChattable", config)
	ret0, _ := ret[0].(telegram_bot_api.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// sendChattable indicates an expected call of sendChattable
func (mr *MockBotAPIMockRecorder) sendChattable(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "sendChattable", reflect.TypeOf((*MockBotAPI)(nil).sendChattable), config)
}

// GetUserProfilePhotos mocks base method
func (m *MockBotAPI) GetUserProfilePhotos(config telegram_bot_api.UserProfilePhotosConfig) (telegram_bot_api.UserProfilePhotos, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserProfilePhotos", config)
	ret0, _ := ret[0].(telegram_bot_api.UserProfilePhotos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserProfilePhotos indicates an expected call of GetUserProfilePhotos
func (mr *MockBotAPIMockRecorder) GetUserProfilePhotos(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserProfilePhotos", reflect.TypeOf((*MockBotAPI)(nil).GetUserProfilePhotos), config)
}

// GetFile mocks base method
func (m *MockBotAPI) GetFile(config telegram_bot_api.FileConfig) (telegram_bot_api.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFile", config)
	ret0, _ := ret[0].(telegram_bot_api.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFile indicates an expected call of GetFile
func (mr *MockBotAPIMockRecorder) GetFile(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFile", reflect.TypeOf((*MockBotAPI)(nil).GetFile), config)
}

// GetUpdates mocks base method
func (m *MockBotAPI) GetUpdates(config telegram_bot_api.UpdateConfig) ([]telegram_bot_api.Update, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpdates", config)
	ret0, _ := ret[0].([]telegram_bot_api.Update)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUpdates indicates an expected call of GetUpdates
func (mr *MockBotAPIMockRecorder) GetUpdates(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpdates", reflect.TypeOf((*MockBotAPI)(nil).GetUpdates), config)
}

// RemoveWebhook mocks base method
func (m *MockBotAPI) RemoveWebhook() (telegram_bot_api.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveWebhook")
	ret0, _ := ret[0].(telegram_bot_api.APIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveWebhook indicates an expected call of RemoveWebhook
func (mr *MockBotAPIMockRecorder) RemoveWebhook() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveWebhook", reflect.TypeOf((*MockBotAPI)(nil).RemoveWebhook))
}

// SetWebhook mocks base method
func (m *MockBotAPI) SetWebhook(config telegram_bot_api.WebhookConfig) (telegram_bot_api.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWebhook", config)
	ret0, _ := ret[0].(telegram_bot_api.APIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetWebhook indicates an expected call of SetWebhook
func (mr *MockBotAPIMockRecorder) SetWebhook(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWebhook", reflect.TypeOf((*MockBotAPI)(nil).SetWebhook), config)
}

// GetWebhookInfo mocks base method
func (m *MockBotAPI) GetWebhookInfo() (telegram_bot_api.WebhookInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebhookInfo")
	ret0, _ := ret[0].(telegram_bot_api.WebhookInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebhookInfo indicates an expected call of GetWebhookInfo
func (mr *MockBotAPIMockRecorder) GetWebhookInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebhookInfo", reflect.TypeOf((*MockBotAPI)(nil).GetWebhookInfo))
}

// GetUpdatesChan mocks base method
func (m *MockBotAPI) GetUpdatesChan(config telegram_bot_api.UpdateConfig) (telegram_bot_api.UpdatesChannel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpdatesChan", config)
	ret0, _ := ret[0].(telegram_bot_api.UpdatesChannel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUpdatesChan indicates an expected call of GetUpdatesChan
func (mr *MockBotAPIMockRecorder) GetUpdatesChan(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpdatesChan", reflect.TypeOf((*MockBotAPI)(nil).GetUpdatesChan), config)
}

// StopReceivingUpdates mocks base method
func (m *MockBotAPI) StopReceivingUpdates() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StopReceivingUpdates")
}

// StopReceivingUpdates indicates an expected call of StopReceivingUpdates
func (mr *MockBotAPIMockRecorder) StopReceivingUpdates() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopReceivingUpdates", reflect.TypeOf((*MockBotAPI)(nil).StopReceivingUpdates))
}

// ListenForWebhook mocks base method
func (m *MockBotAPI) ListenForWebhook(pattern string) telegram_bot_api.UpdatesChannel {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListenForWebhook", pattern)
	ret0, _ := ret[0].(telegram_bot_api.UpdatesChannel)
	return ret0
}

// ListenForWebhook indicates an expected call of ListenForWebhook
func (mr *MockBotAPIMockRecorder) ListenForWebhook(pattern interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenForWebhook", reflect.TypeOf((*MockBotAPI)(nil).ListenForWebhook), pattern)
}

// AnswerInlineQuery mocks base method
func (m *MockBotAPI) AnswerInlineQuery(config telegram_bot_api.InlineConfig) (telegram_bot_api.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnswerInlineQuery", config)
	ret0, _ := ret[0].(telegram_bot_api.APIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AnswerInlineQuery indicates an expected call of AnswerInlineQuery
func (mr *MockBotAPIMockRecorder) AnswerInlineQuery(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnswerInlineQuery", reflect.TypeOf((*MockBotAPI)(nil).AnswerInlineQuery), config)
}

// AnswerCallbackQuery mocks base method
func (m *MockBotAPI) AnswerCallbackQuery(config telegram_bot_api.CallbackConfig) (telegram_bot_api.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnswerCallbackQuery", config)
	ret0, _ := ret[0].(telegram_bot_api.APIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AnswerCallbackQuery indicates an expected call of AnswerCallbackQuery
func (mr *MockBotAPIMockRecorder) AnswerCallbackQuery(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnswerCallbackQuery", reflect.TypeOf((*MockBotAPI)(nil).AnswerCallbackQuery), config)
}

// KickChatMember mocks base method
func (m *MockBotAPI) KickChatMember(config telegram_bot_api.KickChatMemberConfig) (telegram_bot_api.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KickChatMember", config)
	ret0, _ := ret[0].(telegram_bot_api.APIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KickChatMember indicates an expected call of KickChatMember
func (mr *MockBotAPIMockRecorder) KickChatMember(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KickChatMember", reflect.TypeOf((*MockBotAPI)(nil).KickChatMember), config)
}

// LeaveChat mocks base method
func (m *MockBotAPI) LeaveChat(config telegram_bot_api.ChatConfig) (telegram_bot_api.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LeaveChat", config)
	ret0, _ := ret[0].(telegram_bot_api.APIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LeaveChat indicates an expected call of LeaveChat
func (mr *MockBotAPIMockRecorder) LeaveChat(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeaveChat", reflect.TypeOf((*MockBotAPI)(nil).LeaveChat), config)
}

// GetChat mocks base method
func (m *MockBotAPI) GetChat(config telegram_bot_api.ChatConfig) (telegram_bot_api.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChat", config)
	ret0, _ := ret[0].(telegram_bot_api.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChat indicates an expected call of GetChat
func (mr *MockBotAPIMockRecorder) GetChat(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChat", reflect.TypeOf((*MockBotAPI)(nil).GetChat), config)
}

// GetChatAdministrators mocks base method
func (m *MockBotAPI) GetChatAdministrators(config telegram_bot_api.ChatConfig) ([]telegram_bot_api.ChatMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatAdministrators", config)
	ret0, _ := ret[0].([]telegram_bot_api.ChatMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatAdministrators indicates an expected call of GetChatAdministrators
func (mr *MockBotAPIMockRecorder) GetChatAdministrators(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatAdministrators", reflect.TypeOf((*MockBotAPI)(nil).GetChatAdministrators), config)
}

// GetChatMembersCount mocks base method
func (m *MockBotAPI) GetChatMembersCount(config telegram_bot_api.ChatConfig) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatMembersCount", config)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatMembersCount indicates an expected call of GetChatMembersCount
func (mr *MockBotAPIMockRecorder) GetChatMembersCount(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatMembersCount", reflect.TypeOf((*MockBotAPI)(nil).GetChatMembersCount), config)
}

// GetChatMember mocks base method
func (m *MockBotAPI) GetChatMember(config telegram_bot_api.ChatConfigWithUser) (telegram_bot_api.ChatMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatMember", config)
	ret0, _ := ret[0].(telegram_bot_api.ChatMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatMember indicates an expected call of GetChatMember
func (mr *MockBotAPIMockRecorder) GetChatMember(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatMember", reflect.TypeOf((*MockBotAPI)(nil).GetChatMember), config)
}

// UnbanChatMember mocks base method
func (m *MockBotAPI) UnbanChatMember(config telegram_bot_api.ChatMemberConfig) (telegram_bot_api.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnbanChatMember", config)
	ret0, _ := ret[0].(telegram_bot_api.APIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnbanChatMember indicates an expected call of UnbanChatMember
func (mr *MockBotAPIMockRecorder) UnbanChatMember(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnbanChatMember", reflect.TypeOf((*MockBotAPI)(nil).UnbanChatMember), config)
}

// RestrictChatMember mocks base method
func (m *MockBotAPI) RestrictChatMember(config telegram_bot_api.RestrictChatMemberConfig) (telegram_bot_api.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestrictChatMember", config)
	ret0, _ := ret[0].(telegram_bot_api.APIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestrictChatMember indicates an expected call of RestrictChatMember
func (mr *MockBotAPIMockRecorder) RestrictChatMember(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestrictChatMember", reflect.TypeOf((*MockBotAPI)(nil).RestrictChatMember), config)
}

// PromoteChatMember mocks base method
func (m *MockBotAPI) PromoteChatMember(config telegram_bot_api.PromoteChatMemberConfig) (telegram_bot_api.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromoteChatMember", config)
	ret0, _ := ret[0].(telegram_bot_api.APIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PromoteChatMember indicates an expected call of PromoteChatMember
func (mr *MockBotAPIMockRecorder) PromoteChatMember(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromoteChatMember", reflect.TypeOf((*MockBotAPI)(nil).PromoteChatMember), config)
}

// GetGameHighScores mocks base method
func (m *MockBotAPI) GetGameHighScores(config telegram_bot_api.GetGameHighScoresConfig) ([]telegram_bot_api.GameHighScore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGameHighScores", config)
	ret0, _ := ret[0].([]telegram_bot_api.GameHighScore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGameHighScores indicates an expected call of GetGameHighScores
func (mr *MockBotAPIMockRecorder) GetGameHighScores(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGameHighScores", reflect.TypeOf((*MockBotAPI)(nil).GetGameHighScores), config)
}

// AnswerShippingQuery mocks base method
func (m *MockBotAPI) AnswerShippingQuery(config telegram_bot_api.ShippingConfig) (telegram_bot_api.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnswerShippingQuery", config)
	ret0, _ := ret[0].(telegram_bot_api.APIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AnswerShippingQuery indicates an expected call of AnswerShippingQuery
func (mr *MockBotAPIMockRecorder) AnswerShippingQuery(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnswerShippingQuery", reflect.TypeOf((*MockBotAPI)(nil).AnswerShippingQuery), config)
}

// AnswerPreCheckoutQuery mocks base method
func (m *MockBotAPI) AnswerPreCheckoutQuery(config telegram_bot_api.PreCheckoutConfig) (telegram_bot_api.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnswerPreCheckoutQuery", config)
	ret0, _ := ret[0].(telegram_bot_api.APIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AnswerPreCheckoutQuery indicates an expected call of AnswerPreCheckoutQuery
func (mr *MockBotAPIMockRecorder) AnswerPreCheckoutQuery(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnswerPreCheckoutQuery", reflect.TypeOf((*MockBotAPI)(nil).AnswerPreCheckoutQuery), config)
}

// DeleteMessage mocks base method
func (m *MockBotAPI) DeleteMessage(config telegram_bot_api.DeleteMessageConfig) (telegram_bot_api.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMessage", config)
	ret0, _ := ret[0].(telegram_bot_api.APIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMessage indicates an expected call of DeleteMessage
func (mr *MockBotAPIMockRecorder) DeleteMessage(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMessage", reflect.TypeOf((*MockBotAPI)(nil).DeleteMessage), config)
}

// GetInviteLink mocks base method
func (m *MockBotAPI) GetInviteLink(config telegram_bot_api.ChatConfig) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInviteLink", config)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInviteLink indicates an expected call of GetInviteLink
func (mr *MockBotAPIMockRecorder) GetInviteLink(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInviteLink", reflect.TypeOf((*MockBotAPI)(nil).GetInviteLink), config)
}

// PinChatMessage mocks base method
func (m *MockBotAPI) PinChatMessage(config telegram_bot_api.PinChatMessageConfig) (telegram_bot_api.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PinChatMessage", config)
	ret0, _ := ret[0].(telegram_bot_api.APIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PinChatMessage indicates an expected call of PinChatMessage
func (mr *MockBotAPIMockRecorder) PinChatMessage(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PinChatMessage", reflect.TypeOf((*MockBotAPI)(nil).PinChatMessage), config)
}

// UnpinChatMessage mocks base method
func (m *MockBotAPI) UnpinChatMessage(config telegram_bot_api.UnpinChatMessageConfig) (telegram_bot_api.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnpinChatMessage", config)
	ret0, _ := ret[0].(telegram_bot_api.APIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnpinChatMessage indicates an expected call of UnpinChatMessage
func (mr *MockBotAPIMockRecorder) UnpinChatMessage(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnpinChatMessage", reflect.TypeOf((*MockBotAPI)(nil).UnpinChatMessage), config)
}

// SetChatTitle mocks base method
func (m *MockBotAPI) SetChatTitle(config telegram_bot_api.SetChatTitleConfig) (telegram_bot_api.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetChatTitle", config)
	ret0, _ := ret[0].(telegram_bot_api.APIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetChatTitle indicates an expected call of SetChatTitle
func (mr *MockBotAPIMockRecorder) SetChatTitle(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetChatTitle", reflect.TypeOf((*MockBotAPI)(nil).SetChatTitle), config)
}

// SetChatDescription mocks base method
func (m *MockBotAPI) SetChatDescription(config telegram_bot_api.SetChatDescriptionConfig) (telegram_bot_api.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetChatDescription", config)
	ret0, _ := ret[0].(telegram_bot_api.APIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetChatDescription indicates an expected call of SetChatDescription
func (mr *MockBotAPIMockRecorder) SetChatDescription(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetChatDescription", reflect.TypeOf((*MockBotAPI)(nil).SetChatDescription), config)
}

// SetChatPhoto mocks base method
func (m *MockBotAPI) SetChatPhoto(config telegram_bot_api.SetChatPhotoConfig) (telegram_bot_api.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetChatPhoto", config)
	ret0, _ := ret[0].(telegram_bot_api.APIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetChatPhoto indicates an expected call of SetChatPhoto
func (mr *MockBotAPIMockRecorder) SetChatPhoto(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetChatPhoto", reflect.TypeOf((*MockBotAPI)(nil).SetChatPhoto), config)
}

// DeleteChatPhoto mocks base method
func (m *MockBotAPI) DeleteChatPhoto(config telegram_bot_api.DeleteChatPhotoConfig) (telegram_bot_api.APIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChatPhoto", config)
	ret0, _ := ret[0].(telegram_bot_api.APIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteChatPhoto indicates an expected call of DeleteChatPhoto
func (mr *MockBotAPIMockRecorder) DeleteChatPhoto(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChatPhoto", reflect.TypeOf((*MockBotAPI)(nil).DeleteChatPhoto), config)
}
